// Copyright (c) 2017-2020 Xiamen Yaji Software Co., Ltd.
CCEffect %{
  techniques:
  - passes:
    - vert: sprite-vs:vert
      frag: sprite-fs:frag
      depthStencilState:
        depthTest: false
        depthWrite: false
      blendState:
        targets:
        - blend: true
          blendSrc: src_alpha
          blendDst: one_minus_src_alpha
          blendDstAlpha: one_minus_src_alpha
      rasterizerState:
        cullMode: none
      properties:
        alphaThreshold: { value: 0.5 }
        # 自定义参数
        scaleFactor: {
          value: 1,
          editor: {
            tooltip: "放大倍数",
          }
        }
        worldPosition: {
          value: [0 ,0],
          editor: {
            tooltip: "中心坐标",
          }
        }
        texSize: {
          value: [0 ,0],
          editor: {
            tooltip: "贴图宽高",
          }
        }
        # 发光颜色
        lightColor: { 
          value: [1.0, 1.0, 0.0, 1.0], 
          editor: { 
            type: color,
            tooltip: "发光颜色"
          } 
        } 
        # 发光宽度
        glowColorSize: { 
          value: 10,
          editor: {
            tooltip: "发光宽度",
          }
        }
}%

CCProgram sprite-vs %{
  precision highp float;
  #include <builtin/uniforms/cc-global>
  #if USE_LOCAL
    #include <builtin/uniforms/cc-local>
  #endif
  #if SAMPLE_FROM_RT
    #include <common/common-define>
  #endif
  in vec3 a_position;
  in vec2 a_texCoord;
  in vec4 a_color;

  out vec4 color;
  out vec2 uv0;

  uniform pramas {
    vec4 lightColor;
    vec2 worldPosition;
    vec2 texSize;
    float glowColorSize;
    float scaleFactor;
  };

  vec4 vert () {
    vec4 pos = vec4(a_position, 1);
    mat4 mt_trans_1 = mat4(1.0,0.0,0.0,0.0, 0.0,1.0,0.0,0.0, 0.0,0.0,1.0,0.0, -worldPosition.x,-worldPosition.y,0.0,1.0);
    mat4 mt_scale = mat4(scaleFactor,0.0,0.0,0.0, 0.0,scaleFactor,0.0,0.0, 0.0,0.0,scaleFactor,0.0, 0.0,0.0,0.0,1.0);
    mat4 mt_trans_2 = mat4(1.0,0.0,0.0,0.0, 0.0,1.0,0.0,0.0, 0.0,0.0,1.0,0.0, worldPosition.x,worldPosition.y,0.0,1.0);

    #if USE_LOCAL
      pos = cc_matWorld * pos;
    #endif

    #if USE_PIXEL_ALIGNMENT
      pos = cc_matView * pos;
      pos.xyz = floor(pos.xyz);
      pos = cc_matProj * pos;
    #else
      #if USE_SCALE
        pos = cc_matViewProj * mt_trans_2 * mt_scale * mt_trans_1 * pos;
      #else
        pos = cc_matViewProj * pos;
      #endif
    #endif

    uv0 = a_texCoord;

    #if SAMPLE_FROM_RT
      CC_HANDLE_RT_SAMPLE_FLIP(uv0);
    #endif
    color = a_color;

    return pos;
  }
}%

CCProgram sprite-fs %{
  precision highp float;
  #include <builtin/internal/embedded-alpha>
  #include <builtin/internal/alpha-test>
  #include <builtin/uniforms/cc-global>

  in vec4 color;

  // 必须是 vec4 先于 float 声明
  uniform pramas {
    vec4 lightColor;
    vec2 worldPosition;
    vec2 texSize;
    float glowColorSize;
    float scaleFactor;
  };

  #if USE_TEXTURE
    in vec2 uv0;
    #pragma builtin(local)
    layout(set = 2, binding = 12) uniform sampler2D cc_spriteTexture;
  #endif

  vec4 getTextureColor(sampler2D mainTexture, vec2 uv0) {
    if (uv0.x > 1.0 || uv0.x < 0.0 || uv0.y > 1.0 || uv0.y < 0.0) {
      return vec4(0.0, 0.0, 0.0, 0.0);
    }
    return texture(mainTexture, uv0);
  }

  vec2 convertToOriginCoordinate(vec2 uv) {
    return (uv * scaleFactor + (1.0 - scaleFactor) * vec2(0.5 , 0.5));
  }

  vec4 frag () {
    vec4 o = vec4(1, 1, 1, 1);
    vec4 incolor = color;
    o *= color;

    #if USE_TEXTURE
      vec2 new_uv = uv0;
      // o *= texture(cc_spriteTexture, uv0);
      #if USE_SCALE
        new_uv = convertToOriginCoordinate(uv0);
      #endif
      
      if(new_uv.x >= 0.0 && new_uv.y >= 0.0 && new_uv.x <= 1.0 && new_uv.y <= 1.0) {
        o *= texture(cc_spriteTexture, new_uv);
      }else{
        o = vec4(0, 0, 0, 0);
        #if SHOW_OUTTER_GLOW
          if(new_uv.x < 1.0 + glowColorSize / texSize.x && new_uv.x > 0.0 - glowColorSize / texSize.x && new_uv.y < 1.0 + glowColorSize / texSize.y && new_uv.y > 0.0 - glowColorSize  / texSize.y){
            o = lightColor;
            o.a *= smoothstep(-glowColorSize / texSize.x, 0.0, 0.5 - abs(new_uv.x - 0.5)) * smoothstep(-glowColorSize / texSize.y , 0.0, 0.5 - abs(new_uv.y - 0.5));
          }
        #endif
      }
    #endif
    return o;
  }

}%
