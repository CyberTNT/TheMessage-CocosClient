// Copyright (c) 2017-2020 Xiamen Yaji Software Co., Ltd.
CCEffect %{
  techniques:
  - passes:
    - vert: sprite-vs:vert
      frag: sprite-fs:frag
      depthStencilState:
        depthTest: false
        depthWrite: false
      blendState:
        targets:
        - blend: true
          blendSrc: src_alpha
          blendDst: one_minus_src_alpha
          blendDstAlpha: one_minus_src_alpha
      rasterizerState:
        cullMode: none
      properties:
        alphaThreshold: { value: 0.5 }
        # 自定义参数
        # 发光颜色
        glowColor: { 
          value: [1.0, 1.0, 0.0, 1.0], 
          editor: { 
            type: color,
            tooltip: "发光颜色"
          } 
        } 
        # 发光宽度
        glowColorSize: { 
          value: 0.15,
          editor: {
            tooltip: "发光宽度",
            range: [0.0, 1.0],
          }
        }
        # 发光透明度阈值
        #   只有小于等于这个透明度的点才会发光
        glowThreshold: {
          value: 1.0,
          editor: {
            tooltip: "发光阈值",
            range: [0.0, 1.0]
          }
        }
}%

CCProgram sprite-vs %{
  precision highp float;
  #include <builtin/uniforms/cc-global>
  #if USE_LOCAL
    #include <builtin/uniforms/cc-local>
  #endif
  #if SAMPLE_FROM_RT
    #include <common/common-define>
  #endif
  in vec3 a_position;
  in vec2 a_texCoord;
  in vec4 a_color;

  out vec4 color;
  out vec2 uv0;

  vec4 vert () {
    vec4 pos = vec4(a_position, 1);

    #if USE_LOCAL
      pos = cc_matWorld * pos;
    #endif

    #if USE_PIXEL_ALIGNMENT
      pos = cc_matView * pos;
      pos.xyz = floor(pos.xyz);
      pos = cc_matProj * pos;
    #else
      pos = cc_matViewProj * pos;
    #endif

    uv0 = a_texCoord * 2.0;

    #if SAMPLE_FROM_RT
      CC_HANDLE_RT_SAMPLE_FLIP(uv0);
    #endif

    color = a_color;

    return pos;
  }
}%

CCProgram sprite-fs %{
  precision highp float;
  #include <builtin/internal/embedded-alpha>
  #include <builtin/internal/alpha-test>
  #include <builtin/uniforms/cc-global>

  in vec4 color;

  #if USE_TEXTURE
    in vec2 uv0;
    #pragma builtin(local)
    layout(set = 2, binding = 12) uniform sampler2D cc_spriteTexture;
  #endif

  vec4 getTextureColor(sampler2D mainTexture, vec2 uv0) {
    if (uv0.x > 1.0 || uv0.x < 0.0 || uv0.y > 1.0 || uv0.y < 0.0) {
      return vec4(0.0, 0.0, 0.0, 0.0);
    }
    return texture(mainTexture, uv0);
  }

  #if SHOW_OUTTER_GLOW

    uniform glow {
      // 发光颜色
      vec4 glowColor;
      // 发光范围
      float glowColorSize;
      // 发光阈值
      float glowThreshold;
      // 特别地，必须是 vec4 先于 float 声明
    };

    
    /**
    * 获取指定角度方向，距离为xxx的像素的透明度
    *
    * @param angle 角度 [0.0, 360.0]
    * @param dist 距离 [0.0, 1.0]
    *
    * @return alpha [0.0, 1.0]
    */
    float getColorAlpha(float angle, float dist) {
      // 角度转弧度，公式为：弧度 = 角度 * (pi / 180)
      float radian = angle * 0.01745329252; // 这个浮点数是 pi / 180
      vec4 color = getTextureColor(cc_spriteTexture, uv0 + vec2(dist * cos(radian), dist * sin(radian))); 
      return color.a;
    }

    /**
    * 获取指定距离的周边像素的透明度平均值
    *
    * @param dist 距离 [0.0, 1.0]
    *
    * @return average alpha [0.0, 1.0]
    */
    float getAverageAlpha(float dist) {
      float totalAlpha = 0.0;
      // 以30度为一个单位，那么「周边一圈」就由0到360度中共计12个点的组成
      totalAlpha += getColorAlpha(0.0, dist);
      totalAlpha += getColorAlpha(30.0, dist);
      totalAlpha += getColorAlpha(60.0, dist);
      totalAlpha += getColorAlpha(90.0, dist);
      totalAlpha += getColorAlpha(120.0, dist);
      totalAlpha += getColorAlpha(150.0, dist);
      totalAlpha += getColorAlpha(180.0, dist);
      totalAlpha += getColorAlpha(210.0, dist);
      totalAlpha += getColorAlpha(240.0, dist);
      totalAlpha += getColorAlpha(270.0, dist);
      totalAlpha += getColorAlpha(300.0, dist);
      totalAlpha += getColorAlpha(330.0, dist);
      return totalAlpha * 0.0833; // 1 / 12 = 0.08333

    }

    /**
    * 获取发光的透明度
    */
    float getGlowAlpha() {
      // 如果发光宽度为0，直接返回0.0透明度，减少计算量
      if (glowColorSize == 0.0) {
        return 0.0;
      }

      float totalAlpha = 0.0;
      totalAlpha += getAverageAlpha(glowColorSize * 0.1);
      totalAlpha += getAverageAlpha(glowColorSize * 0.2);
      totalAlpha += getAverageAlpha(glowColorSize * 0.3);
      totalAlpha += getAverageAlpha(glowColorSize * 0.4);
      totalAlpha += getAverageAlpha(glowColorSize * 0.5);
      totalAlpha += getAverageAlpha(glowColorSize * 0.6);
      totalAlpha += getAverageAlpha(glowColorSize * 0.7);
      totalAlpha += getAverageAlpha(glowColorSize * 0.8);
      totalAlpha += getAverageAlpha(glowColorSize * 0.9);
      totalAlpha += getAverageAlpha(glowColorSize * 1.0);
      return totalAlpha * 0.1;
    }

  #endif

  vec4 frag () {
    vec4 o = vec4(1, 1, 1, 1);

    #if USE_TEXTURE
      o *= texture(cc_spriteTexture, uv0);
      #if CC_USE_ALPHA_ATLAS_TEXTURE
      o.a *= texture(cc_spriteTexture, uv0 + vec2(0, 0.5)).r;
      #endif
    #endif

    #if SHOW_OUTTER_GLOW
      float alpha = getGlowAlpha();
      if (alpha <= glowThreshold) {
        // 然后以阈值作为标量，重新将透明度归一化
        alpha = alpha / glowThreshold;

        // 给点调料，让靠近边缘的更加亮
        alpha = -1.0 * (alpha - 1.0) * (alpha - 1.0) * (alpha - 1.0) * (alpha - 1.0) + 1.0;
      } else {
        alpha = 0.0;
      }

      vec4 color_dest = glowColor * alpha;
      vec4 color_src = o;

      o = color_src * color_src.a + color_dest * (1.0 - color_src.a);
    #endif

    o *= color;
    ALPHA_TEST(o);

    return o;
  }
}%
